@page "/cart"
@using System.Security.Claims
@using StoreUI.Domain;
@using StoreUI.Data
@using StoreUI.Contracts
@using System.Text
@inject IAppProductService _productService
@inject IDigiShopService<ProductModel> _productService
@inject IDigiShopService<OrderModel> _orderService
@inject ILocalStorageService _localStorage

<h2>Shopping Cart</h2>
@if (IsUserAuthenticated)
{
    <table class="table-condensed table-striped" style="width: 100%">
        @if (cartItemtList != null)
        {
            @foreach (var item in cartItemtList)
            {
                <tr>
                    <td>
                        <img src="@item.ImagePath" height="50px" width="50px" class="img-rounded" />
                    </td>
                    <td>
                        @item.ProductName
                    </td>
                    <td style="text-align: right">
                        @item.Quantity
                    </td>
                    <td style="text-align: right">
                        @item.ProductPrice.ToString("#,##0.00")
                    </td>
                    <td style="text-align: right">
                        @item.ItemTotal.ToString("#,##0.00")
                    </td>
                </tr>
            }
        }
        <tr style="border-top: 2px solid maroon">
            <td colspan="4" style="text-align: right">
                <h3>Total Amount</h3>
            </td>
            <td style="text-align: right">
                <h3>@TotalAmount.ToString("#,##0.00")</h3>
            </td>
        </tr>

        <tr style="text-align: right">
            <td colspan="5">
                <input type="submit" value="Save & Checkout" name="Save" class="btn btn-primary" id="SaveOrder" @onclick="SaveOrder" />
                <input type="button" value="Clear Cart" name="clear" class="btn btn-outline-danger" id="ClearCart" @onclick="EmptyCart" />
            </td>

        </tr>

        <tr style="text-align: center">
            <td colspan="5">
                <a href="/shop"><b>Back Shopping</b></a>
            </td>
        </tr>
    </table>
}




@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;
    private List<CartItemModel> cartItemtList = new List<CartItemModel>();
    private decimal TotalAmount = 0;

    bool IsUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            IsUserAuthenticated = true;
            if (await _localStorage.ContainKeyAsync("cart"))
            {
                cartItemtList = await _localStorage.GetItemAsync<List<CartItemModel>>("cart");
                TotalAmount = cartItemtList.Sum(c => c.ItemTotal);
            }
        }
    }

    private async Task SaveOrder()
    {
        var newOrder = new OrderModel { CartItems = cartItemtList };
        newOrder = await _orderService.SaveAsync(ApiEndPoints.Order.Create, newOrder);
        await _orderService.EmailOrderAsync(ConvertCartToHtmlOrder(newOrder), newOrder.UserEmail);
    }

    private string ConvertCartToHtmlOrder(OrderModel order)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append(@"<HTML><head> <style>table, th, td {border: 1px solid black;}</style></head>");
        sb.Append($"ORDER #{order.OrderId}");
        sb.Append("<TABLE>\n");
        sb.Append("<TH><TR>\n");
        sb.Append($"<TD>Product Name</TD><TD>Product Description</TD><TD>Quantity</TD><TD>Unit Price</TD><TD>Item Total</TD>");
        sb.Append("</TR></TH>\n");
        foreach (var item in cartItemtList)
        {
            sb.Append("<TR>\n");
            sb.Append($"<TD>{item.ProductName}</ TD ><TD>{item.ProductDescription}</ TD ><TD>{item.Quantity}</ TD ><TD>{item.ProductPrice}</ TD ><TD>{item.ItemTotal}</ TD > ");
            sb.Append("</TR>\n");
        }
        sb.Append("</TABLE></HTML>");

        return sb.ToString();
    }
    private async Task EmptyCart()
    {
        cartItemtList.Clear();
        await _localStorage.RemoveItemAsync("cart");
        await _localStorage.RemoveItemAsync("cartCount");
    }
}
